package ${package};

% for dependency in dependencies['types']:
import ${package}.${to_camel_case(dependency)};
% endfor

class ${name} ${"extends " + base['name'] if base and base['ns'] == tns else ''} {

    % for f in fields:
    ${modifiers['fields']} ${typemap[fields[f]]} ${f};
    % endfor

    % if 'sequence' in ordering:
        % for e in ordering['sequence']:
            % if 'anonymous' not in e['type']:
                % if e['type']['ns'] == tns:
    ${modifiers['fields']} ${to_camel_case(e['type']['name'])} ${e['name']};
                % else:
    ${modifiers['fields']} ${typemap[e['type']['name']]} ${e['name']};
                % endif
            % else:
                ## anonymous type declarations have to be handled here
            % endif
        % endfor
    % endif

    % for f in fields:
    ${modifiers['methods']} void set${to_camel_case(f)}(${typemap[fields[f]]} value) {
        this.${f} = value;
    }

    ${modifiers['methods']} ${typemap[fields[f]]} get${to_camel_case(f)}() {
        return this.${f};
    }
    % endfor

    % if 'sequence' in ordering:
        % for e in ordering['sequence']:
            % if 'anonymous' not in e['type']:
    ${modifiers['methods']} void set${to_camel_case(e['name'])}(${to_camel_case(e['type']['name']) if e['type']['ns'] == tns else typemap[e['type']['name']]} ${e['name']}) {
        this.${e['name']} = ${e['name']};
    }

    ${modifiers['methods']} ${to_camel_case(e['type']['name']) if e['type']['ns'] == tns else typemap[e['type']['name']]} get${to_camel_case(e['name'])}() {
        return this.${e['name']};
    }
            % else:
                ## anonymous type declarations have to be handled here
            % endif
        % endfor
    % endif

    ${modifiers['methods']} String toXML() {
        return ${serialiser};
    }
}